= pi-Zero-Cluster
:toc: right

== docker
https://www.youtube.com/watch?v=qSpfWP-Fgjc
This is where I got the information on how to do most of the things.

https://www.raspberrypi.com/software/
This where I installed the Raspberrypi Imager. With this application, you can image a SD-Card to have the proper OS for your raspberrypi installed before you put it in. This will obviously come to hand when we are going to be setting up the cluster´s software.

Whilst I was doing this, my father made a nice image to show what we will need for the cluster to work. We will need to assign static IPs to all of the individual piZs, edit the host file and include important network information, create a number of ssh keys and connections to all of the piZs and much more. All of that is included in the following plantuml iamge.

.overtview of setup
image::images/context.png[]

We then downlaoded docker and set it up witht the help of this video.
https://www.youtube.com/watch?v=-jLdkDxCDMo
A few steps might have to be done deifferently, especially when one gets to the point to initialize the swarm. There we had to log int our own router and assign the static IPs for all of the nodes (piZ1, piZ2, piZ3, piZ4). When doing so, it is important to specify the leasetime to infinite to prevent the IPs from changing later. I would recommend always looking at the settings from the command "ip a" before changing the IPs and MACs on your router.

== gadget ethernet and serial

We had to make the piZeros into functioning ethernet gadgets. To achieve this , we used https://learn.adafruit.com/turning-your-raspberry-pi-zero-into-a-usb-gadget/ethernet-tweaks. We imaged oe of the disks to the full extent that is described in this tutorial and then copied all of it´s contents into a file to image the other 3 nodes. Instead of using the pi itself as the gateway, we used a commander node and it´s IP as the router/gateway. We also did not actually use a serial conection to do any of this, instead using an already established ssh connection, although we did run into some errors along the way and we did have to completely reconfigure the IP etc. of the first node we were working on to ensure the ssh connecton, because it broke a few times. Otherwise this tutorial worked just about fine. We also recommend maybe buying this useful little gadget https://shop.pimoroni.com/products/cluster-hat?variant=22064645063, as it may just relieve you of a lot of work and stress with having to use individual power supplies and USB hubs and so forth and so on. 

== regenerating ssh keys

.regenerate keys
----
sudo dpkg-reconfigure openssh-server
----

Because we had cloned EVERYTHING from one disk to another, we had also cloned the ssh keys. This meant, logging into any of the nodes would result in logging into the first node. This problem is easily resolved by properly regenerating the ssh keys on every cluster one after the other, by logging into the original first, regening the ssh key for it. Then, you´ll want to log into the next node, still using the old ssh key and repeat the process until you are done with every node. You should then be able to log into every node individually again.

== new pis for the cluster and reimagery

We got completely new cluster nodes after nearly a year of not working on this anymore. The new pis have to be reimaged and set up completely by scratch. Maybe the stuff that we used before will still work, but there is no guarantee. I will also start adding files for 3D-printing all the stuff that one needs for the cluster if one isn´t into buying it. By the way, the new pis are raspberry pie 02W.

== new images for the pis

We decided to image them with the Raspberry OS (Legacy-64bit) Lite. You will want to get the Raspberry imager for this obviously. Now, you want to allow the pis to access the WiFi and give them SSID and password, as this will make the process way easier. Then, you will want to give them hostnames, e.g. "piZc1/2/3/4". In our case, we specify the rest to be located in Germany. Then, we will go on to set a username and a password for the pi. The username can be the same as the hostname, that shouldn´t be a problem. You will need this to enable SSH. NOW NOTE, don´t set the keyboard to be cyrrilic or something of the sorts and the pi 02W can only do 2.4GHz on wireless. If you don´t do these steps, someone will laugh at you, believe me. When enabling ssh, you will want to make it only accessible with your public key, more of which can be added after you´re done configuring. You can add yours by going to your local machine and doing the following:

[source,BASH]
----
cd
cd .ssh
cat id_rsa.pub
----

and then copying that into the respctive field. 

== Set-up cluster worker

.copy worker script to node
[source,BASH]
----
scp cluster-setup/initial-worker.sh nodex:/path/initial.sh
----

.copy manager script to node
[source,BASH]
----
scp cluster-setup/initial-manager.sh nodex:/path/initial.sh
----

.Start install script on node
[source,BASH]
----
ssh nodex initial.sh
----

=== The install scripts

.worker script
----
include::./cluster-setup/initial-worker.sh[]
----

.manager script
----
include::./cluster-setup/initial-manager.sh[]
----

== basics of ssh

To ssh into your newly setup pis, you will want to do the following:

----
ssh hostnameOfYourPi@usernameOfYourPi
----